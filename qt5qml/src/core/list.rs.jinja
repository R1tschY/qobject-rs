// GENERATED -- DO NOT EDIT!!

use std::iter::FromIterator;

cpp! {{ '{{' }}
    {% for item in includes -%}
        {{ '#include' }} <{{ item }}>
    {% endfor %}
{{ '}}' }}


{% for item in types -%}
cpp_class!(
    #[derive(Clone, PartialEq, Eq)]
    pub unsafe struct {{ item.name }} as "QList<{{ item.cpp }}>"
);

impl {{ item.name }} {
    #[inline]
    pub fn new() -> Self {
        Self::default()
    }

    #[inline]
    pub fn len(&self) -> i32 {
        cpp!(unsafe [self as "const QList<{{ item.cpp }}>*"] -> i32 as "int" {
            return self->size();
        })
    }

    #[inline]
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn as_slice(&self) -> &[{{ item.rs }}] {
        let mut size = 0;
        let ptr = cpp!(unsafe [
            self as "const QList<{{ item.cpp }}>*", mut size as "size_t"
        ] -> *const {{ item.rs }} as "{{ item.cpp }} const*" {
            size = self->size();
            return &self->front();
        });
        unsafe { std::slice::from_raw_parts(ptr, size) }
    }

    pub fn push(&mut self, item: {{ item.rs }}) {
        cpp!(unsafe [self as "QList<{{ item.cpp }}>*", item as "{{ item.cpp }}"] {
            self->append(item);
        })
    }

    pub fn append(&mut self, value: &{{ item.name }}) {
        cpp!(unsafe [self as "QList<{{ item.cpp }}>*",
                     value as "const QList<{{ item.cpp }}>*"] {
            self->append(*value);
        })
    }

    pub fn extend_from_slice(&mut self, slice: &[{{ item.rs }}]) {
        let ptr = slice.as_ptr();
        let size = slice.len();
        cpp!(unsafe [self as "QList<{{ item.cpp }}>*", ptr as "{{ item.cpp }} const*", size as "size_t"] {
            self->reserve(self->size() + size);
            for (size_t i = 0; i < size; ++i) {
                self->push_back(ptr[i]);
            }
        })
    }

    pub fn reserve(&self, additional: usize) {
        cpp!(unsafe [self as "QList<{{ item.cpp }}>*", additional as "size_t"] {
            self->reserve(self->size() + additional);
        })
    }

    pub fn iter(&self) -> impl Iterator<Item = &{{ item.rs }}> {
        self.as_slice().iter()
    }
}

impl Extend<{{ item.rs }}> for {{ item.name }} {
    fn extend<T: IntoIterator<Item = {{ item.rs }}>>(&mut self, iter: T) {
        for item in iter {
            self.push(item);
        }
    }
}

impl FromIterator<{{ item.rs }}> for {{ item.name }} {
    fn from_iter<T: IntoIterator<Item = {{ item.rs }}>>(iter: T) -> Self {
        let mut res = Self::default();
        res.extend(iter);
        res
    }
}

impl<'a> IntoIterator for &'a {{ item.name }} {
    type Item = &'a {{ item.rs }};
    type IntoIter = std::slice::Iter<'a, {{ item.rs }}>;

    #[inline]
    fn into_iter(self) -> Self::IntoIter {
        self.as_slice().iter()
    }
}

{% endfor %}
