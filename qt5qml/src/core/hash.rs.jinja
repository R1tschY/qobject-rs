// GENERATED -- DO NOT EDIT!!

{% for use in uses -%}
use {{ use }};
{% endfor %}

cpp! {{ '{{' }}
    {% for item in includes -%}
        {{ '#include' }} <{{ item }}>
    {% endfor %}
{{ '}}' }}


{% for item in types %}
{%- set cpp = "QHash<" + item.key + ", " + item.value + ">" -%}
cpp_class!(
    #[derive(Clone, PartialEq, Eq)]
    pub unsafe struct {{ item.name }} as "{{ cpp }}"
);

impl {{ item.name }} {
    pub fn new() -> Self {
        Self::default()
    }

    pub fn len(&self) -> i32 {
        cpp!(unsafe [self as "const {{ cpp }}*"] -> i32 as "int" {
            return self->size();
        })
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn insert(&mut self, key: {{ item.key_rs }}, value: {{ item.value_rs }}) {
        cpp!(unsafe [self as "{{ cpp }}*", key as "{{ item.key }}", value as "{{ item.value }}"] {
            self->insert(key, value);
        })
    }
}

impl From<HashMap<{{ item.key_rs }}, {{ item.value_rs }}>> for {{ item.name }} {
    fn from(value: HashMap<{{ item.key_rs }}, {{ item.value_rs }}>) -> Self {
        let mut result = Self::new();
        for entry in value {
            result.insert(entry.0, entry.1);
        }
        result
    }
}

{% endfor %}
