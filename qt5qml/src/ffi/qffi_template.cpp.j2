
#include "qffi.hpp"
#include <type_traits>

// Helpers

template<typename T, typename ...Args>
static void qffi_call_ctor(T* ptr, Args&&... args) {
  ::new(ptr) T(std::forward<Args>(args)...);
}

template<typename T>
static void qffi_call_default_ctor(T* ptr) {
  ::new(ptr) T();
}

template<typename T>
static void qffi_call_dtor(T* ptr) {
  ptr->~T();
}

// Helpers End

extern "C" {

{% for name, cls in classes.items() -%}
{%- set cpp_name = cls.overwrite_name or name %}

// {{ name }}

{%- if not cls.movable -%}

{# QOBJECT CTOR #}
{% if cls.qobject_default_ctor -%}
{{ name }}* qffi_{{ name }}_init(QObject* parent) {
    return ({{ name }}*)new {{ cpp_name }}(parent);
}
{% endif %}

{#- DTOR #}
{% if cls.generate_dtor -%}
void qffi_{{ name }}_destroy({{ name }}* self) {
    delete ({{ cpp_name }}*)self;
}
{% endif %}

{#- CLONE #}
{% if cls.copy_ctor -%}
{{ name }}* qffi_{{ name }}_clone({{ name }} const* self) {
    return ({{ name }}*)new {{ cpp_name }}(*({{ cpp_name }} const*)self);
}
{% endif -%}

{%- else -%}{#- not movable #}

{% if cls.overwrite_name -%}
{%- set cls_name = name -%}
{%- else -%}
{%- set cls_name = 'Qffi_' + name -%}
{% endif -%}

static_assert(alignof({{ cpp_name }}) == alignof({{ cls_name }}), "Alignment of {{ cpp_name }} incompatible");
static_assert(sizeof({{ cpp_name }}) == sizeof({{ cls_name }}), "Size of {{ cpp_name }} incompatible");

{%- if cls.dtor is sameas false or cls.dtor == 'trivial' -%}
static_assert(std::is_trivially_destructible<{{ cpp_name }}>::value, "{{ cpp_name }} is not trivially destructible");
{% endif -%}
{%- if cls.default_ctor == 'trivial' -%}
static_assert(std::is_trivially_default_constructible<{{ cpp_name }}>::value, "{{ cpp_name }} is not trivially default constructible");
{% endif %}
{%- if cls.copy_ctor == 'trivial' -%}
static_assert(std::is_trivially_copy_constructible<{{ cpp_name }}>::value, "{{ cpp_name }} is not trivially copy constructible");
{% endif %}
{%- if cls.copy_assign == 'trivial' -%}
static_assert(std::is_trivially_copy_assignable<{{ cpp_name }}>::value, "{{ cpp_name }} is not trivially copy assignable");
{% endif %}

{# CTOR #}
{% if cls.default_ctor -%}
void qffi_{{ name }}_init({{ name }}* self) {
    ::qffi_call_default_ctor(({{ cpp_name }}*)self);
}
{% endif %}

{#- DTOR #}
{% if cls.generate_dtor -%}
void qffi_{{ name }}_destroy({{ name }}* self) {
    ::qffi_call_dtor(({{ cpp_name }}*)self);
}
{% endif %}

{#- CLONE #}
{% if cls.copy_ctor -%}
void qffi_{{ name }}_clone({{ name }} const* self, {{ name }}* new_) {
    new (({{ cpp_name }}*)new_) {{ cpp_name }}(*({{ cpp_name }} const*)self);
}
{% endif -%}

{%- endif %}{#- not movable -#}

{#- EQUALS #}
{% if cls.eq -%}
bool qffi_{{ name }}_equals({{ name }} const* self, {{ name }} const* other) {
    return *(({{ cpp_name }} const*)self) == *(({{ cpp_name }} const*)other);
}
{% endif -%}

{#- ORD #}
{% if cls.ord -%}
signed char qffi_{{ name }}_ord({{ name }} const* _self, {{ name }} const* _other) {
    auto* self = ({{ cpp_name }} const*) _self;
    auto* other = ({{ cpp_name }} const*) _other;
    return int(*other < *self) - int(*self < *other);
}
{% endif -%}

{#- Methods -#}
{% for method_name, method in cls.methods.items() %}
{{ method.return_ }} qffi_{{ name }}_{{ method_name }}(
    {%- if not method.static -%}
        {{ name }} {% if method.const %}const{% endif %}* _self
        {%- if method.params %}, {% endif -%}
    {%- endif -%}
    {%- for name, type in method.params.items() -%}
        {{ type }} {{ name }}
        {%- if not loop.last %}, {% endif -%}
    {%- endfor -%}
) {
    {% if not method.static -%}
    auto* self = ({{ cpp_name }} {% if method.const %}const{% endif %}*) _self;
    {%- endif %}
    {{ method.body | trim | indent }}
}
{% endfor %}
{%- endfor %}
}