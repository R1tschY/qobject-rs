/* automatically generated by rust-bindgen 0.57.0 */

#[repr(C)]
pub struct _QString {
    pub _1: *mut ::std::os::raw::c_void,
}
#[repr(C)]
pub struct _QByteArray {
    pub _1: *mut ::std::os::raw::c_void,
}
#[repr(C)]
pub struct _QUrl {
    pub _1: *mut ::std::os::raw::c_void,
}
#[repr(C)]
pub struct _QHashIntQByteArray {
    pub _1: *mut ::std::os::raw::c_void,
}
pub type QString = _QString;
pub type QByteArray = _QByteArray;
pub type QUrl = _QUrl;
#[repr(C)]
pub struct QObject {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct QTimer {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct QCoreApplication {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct QGuiApplication {
    _unused: [u8; 0],
}
pub type QHashIntQByteArray = _QHashIntQByteArray;
extern "C" {
    pub fn qffi_QString_init(self_: *mut QString);
}
extern "C" {
    pub fn qffi_QString_destroy(self_: *mut QString);
}
extern "C" {
    pub fn qffi_QString_clone(self_: *const QString, new_: *mut QString);
}
extern "C" {
    pub fn qffi_QString_equals(self_: *const QString, other: *const QString) -> bool;
}
extern "C" {
    pub fn qffi_QString_size(self_: *const QString) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qffi_QString_isNull(self_: *const QString) -> bool;
}
extern "C" {
    pub fn qffi_QString_fromUtf8(
        data: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        dest: *mut QString,
    );
}
extern "C" {
    pub fn qffi_QString_fromUtf16(
        data: *const ::std::os::raw::c_ushort,
        size: ::std::os::raw::c_int,
        dest: *mut QString,
    );
}
extern "C" {
    pub fn qffi_QString_fromUtf16Unchecked(
        data: *const ::std::os::raw::c_ushort,
        size: ::std::os::raw::c_int,
        dest: *mut QString,
    );
}
extern "C" {
    pub fn qffi_QString_toUtf8(self_: *const QString, dest: *mut QByteArray);
}
extern "C" {
    pub fn qffi_QString_utf16(
        self_: *const QString,
        len: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn qffi_QString_compare(
        self_: *const QString,
        other: *const QString,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qffi_QByteArray_init(self_: *mut QByteArray);
}
extern "C" {
    pub fn qffi_QByteArray_destroy(self_: *mut QByteArray);
}
extern "C" {
    pub fn qffi_QByteArray_clone(self_: *const QByteArray, new_: *mut QByteArray);
}
extern "C" {
    pub fn qffi_QByteArray_equals(self_: *const QByteArray, other: *const QByteArray) -> bool;
}
extern "C" {
    pub fn qffi_QByteArray_fromData(
        data: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        dest: *mut QByteArray,
    );
}
extern "C" {
    pub fn qffi_QByteArray_data(
        self_: *const QByteArray,
        len: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn qffi_QByteArray_compare(
        self_: *const QByteArray,
        other: *const QByteArray,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qffi_QUrl_init(self_: *mut QUrl);
}
extern "C" {
    pub fn qffi_QUrl_destroy(self_: *mut QUrl);
}
extern "C" {
    pub fn qffi_QUrl_clone(self_: *const QUrl, new_: *mut QUrl);
}
extern "C" {
    pub fn qffi_QUrl_equals(self_: *const QUrl, other: *const QUrl) -> bool;
}
extern "C" {
    pub fn qffi_QUrl_cmp(self_: *const QUrl, other: *const QUrl) -> ::std::os::raw::c_schar;
}
extern "C" {
    pub fn qffi_QUrl_fromString(value: *const QString, out: *mut QUrl);
}
extern "C" {
    pub fn qffi_QUrl_fromLocalFile(value: *const QString, out: *mut QUrl);
}
extern "C" {
    pub fn qffi_QUrl_debug(self_: *const QUrl, out: *mut QString);
}
extern "C" {
    pub fn qffi_QObject_destroy(self_: *mut QObject);
}
extern "C" {
    pub fn qffi_QTimer_init(parent: *mut QObject) -> *mut QTimer;
}
extern "C" {
    pub fn qffi_QTimer_isActive(self_: *const QTimer) -> bool;
}
extern "C" {
    pub fn qffi_QTimer_interval(self_: *const QTimer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qffi_QTimer_setInterval(self_: *mut QTimer, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn qffi_QTimer_remainingTime(self_: *const QTimer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qffi_QTimer_isSingleShot(self_: *const QTimer) -> bool;
}
extern "C" {
    pub fn qffi_QTimer_setSingleShot(self_: *mut QTimer, value: bool);
}
extern "C" {
    pub fn qffi_QTimer_timerType(self_: *const QTimer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qffi_QTimer_setTimerType(self_: *mut QTimer, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn qffi_QTimer_start(self_: *mut QTimer);
}
extern "C" {
    pub fn qffi_QTimer_startWithInterval(self_: *mut QTimer, interval: ::std::os::raw::c_int);
}
extern "C" {
    pub fn qffi_QTimer_stop(self_: *mut QTimer);
}
extern "C" {
    pub fn qffi_QCoreApplication_exec() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qffi_QCoreApplication_init(
        argc: *mut ::std::os::raw::c_int,
        argv: *mut *const ::std::os::raw::c_char,
    ) -> *mut QCoreApplication;
}
extern "C" {
    pub fn qffi_QGuiApplication_exec() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qffi_QGuiApplication_init(
        argc: *mut ::std::os::raw::c_int,
        argv: *mut *const ::std::os::raw::c_char,
    ) -> *mut QGuiApplication;
}
extern "C" {
    pub fn qffi_QHashIntQByteArray_init(self_: *mut QHashIntQByteArray);
}
extern "C" {
    pub fn qffi_QHashIntQByteArray_destroy(self_: *mut QHashIntQByteArray);
}
extern "C" {
    pub fn qffi_QHashIntQByteArray_clone(
        self_: *const QHashIntQByteArray,
        new_: *mut QHashIntQByteArray,
    );
}
extern "C" {
    pub fn qffi_QHashIntQByteArray_equals(
        self_: *const QHashIntQByteArray,
        other: *const QHashIntQByteArray,
    ) -> bool;
}
extern "C" {
    pub fn qffi_QHashIntQByteArray_size(self_: *const QHashIntQByteArray) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qffi_QHashIntQByteArray_insert(
        self_: *mut QHashIntQByteArray,
        key: *const ::std::os::raw::c_int,
        value: *const QByteArray,
    );
}
