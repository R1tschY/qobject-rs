classes:
  # == QString ==
  QString:
    default-ctor: true
    copy-ctor: true
    copy-assign: true
    movable: true
    eq: true

    methods:
      size:
        params: {}
        return: int
        const: true
        body: return self->size();

      isNull:
        params: {}
        return: bool
        const: true
        body: return self->isNull();

      fromUtf8:
        params:
          data: const char*
          size: int
          dest: QString*
        static: true
        body: new (dest) QString(QString::fromUtf8(data, size));

      fromUtf16:
        params:
          data: const unsigned short*
          size: int
          dest: QString*
        static: true
        body: new (dest) QString(QString::fromUtf16(data, size));

      fromUtf16Unchecked:
        params:
          data: const unsigned short*
          size: int
          dest: QString*
        static: true
        body: new (dest) QString((const QChar*)(data), size);

      toUtf8:
        params:
          dest: QByteArray*
        const: true
        body: new (dest) QByteArray(self->toUtf8());

      utf16:
        params:
          len: int*
        return: "const unsigned short*"
        const: true
        body: |
          *len = self->size();
          return (const unsigned short*)self->constData();

      compare:
        params:
          other: const QString*
        const: true
        return: int
        body: return self->compare(*other);

  # == QByteArray ==
  QByteArray:
    default-ctor: true
    copy-ctor: true
    copy-assign: true
    movable: true
    eq: true

    methods:
      fromData:
        params:
          data: const char*
          len: int
          dest: QByteArray*
        static: true
        body: new (dest) QByteArray(data, len);

      data:
        params:
          len: int*
        return: "const char*"
        const: true
        body: |
          *len = self->size();
          return self->constData();

      compare:
        params:
          other: const QByteArray*
        const: true
        return: int
        # TODO: Qt 5.12: body: return self->compare(*other);
        body: return int(*self < *other) - int(*self > *other);

  # == QUrl ==
  QUrl:
    default-ctor: true
    copy-ctor: true
    copy-assign: true
    movable: true
    eq: true
    ord: true

    methods:
      fromString:
        static: true
        params:
          value: const QString*
          out: QUrl*
        body: new (out) QUrl(*value);

      fromLocalFile:
        static: true
        params:
          value: const QString*
          out: QUrl*
        body: new (out) QUrl(QUrl::fromLocalFile(*value));

      debug:
        const: true
        params:
          out: QString*
        body: |
          new (out) QString();
          QDebug(out).nospace() << *self;

  # == QObject ==
  QObject:
    dtor: true

  # == QTimer ==
  QTimer:
    qobject-default-ctor: true
    qobject: true
    methods:
      isActive:
        const: true
        return: bool
        body: return self->isActive();

      interval:
        const: true
        return: int
        body: return self->interval();
      setInterval:
        params:
          value: int
        body: self->setInterval(value);

      remainingTime:
        const: true
        return: int
        body: return self->remainingTime();

      isSingleShot:
        const: true
        return: bool
        body: return self->isSingleShot();
      setSingleShot:
        params:
          value: bool
        body: return self->setSingleShot(value);

      timerType:
        const: true
        return: int
        body: return self->timerType();
      setTimerType:
        params:
          value: int
        body: self->setTimerType(static_cast<Qt::TimerType>(value));

      start:
        body: self->start();
      startWithInterval:
        params:
          interval: int
        body: self->start(interval);
      stop:
        body: self->stop();

  # == QCoreApplication ==
  QCoreApplication:
    qobject: true
    methods:
      exec:
        static: true
        return: int
        body: return QCoreApplication::exec();
      init:
        static: true
        params:
          argc: int*
          argv: char const**
        return: QCoreApplication*
        body: return new QCoreApplication(*argc, (char**)argv);

  # == QGuiApplication ==
  QGuiApplication:
    qobject: true
    methods:
      exec:
        static: true
        return: int
        body: return QGuiApplication::exec();
      init:
        static: true
        params:
          argc: int*
          argv: char const**
        return: QGuiApplication*
        body: return new QGuiApplication(*argc, (char**)argv);

  # == QHash<int, QByteArray> ==
  QHashIntQByteArray:
    overwrite-include: QHash
    overwrite-name: QHash<int, QByteArray>
    default-ctor: true
    copy-ctor: true
    copy-assign: true
    movable: true
    eq: true

    methods:
      size:
        const: true
        return: int
        body: return self->size();
      insert:
        params:
          key: const int*
          value: const QByteArray*
        body: self->insert(*key, *value);



includes:
  - QDebug

